digraph {
graph [ordering="out"];
node0[label="ProgramNode "];
node1[label="FunctionDefinitionNode (dynamic) main "];
node2[label="InitializedVariableNode (int)i@0"];
node1 -> node2;
node3[label="ExpressionNode operation: Assignment"];
node4[label="InitializedVariableNode (String)s@0"];
node3 -> node4;
node5[label="StringLiteralNode literal: \"Ola\""];
node3 -> node5;
node1 -> node3;
node6[label="ExpressionNode operation: Print"];
node7[label="InitializedVariableNode (String)s@0"];
node6 -> node7;
node1 -> node6;
node8[label="ExpressionNode operation: Assignment"];
node9[label="InitializedVariableNode (int)i@0"];
node8 -> node9;
node10[label="ExpressionNode operation: Addition"];
node11[label="NumericLiteralNode literal: 2"];
node10 -> node11;
node12[label="ExpressionNode operation: Multiplication"];
node13[label="NumericLiteralNode literal: 5"];
node12 -> node13;
node14[label="ExpressionNode operation: Division"];
node15[label="NumericLiteralNode literal: 3"];
node14 -> node15;
node16[label="NumericLiteralNode literal: 4"];
node14 -> node16;
node12 -> node14;
node10 -> node12;
node8 -> node10;
node1 -> node8;
node0 -> node1;
}
