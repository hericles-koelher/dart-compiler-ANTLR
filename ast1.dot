digraph {
graph [ordering="out"];
node0[label="ProgramNode "];
node1[label="FunctionDefinitionNode (dynamic) main "];
node2[label="IfNode "];
node3[label="OperationNode operation: Greater"];
node4[label="VariableNode i@0"];
node3 -> node4;
node5[label="LiteralNode literal: 5"];
node3 -> node5;
node2 -> node3;
node6[label="StatementsNode "];
node7[label="VariableDefinitionNode (int)x@0"];
node8[label="OperationNode operation: Addition"];
node9[label="LiteralNode literal: 1"];
node8 -> node9;
node10[label="LiteralNode literal: 4"];
node8 -> node10;
node7 -> node8;
node6 -> node7;
node2 -> node6;
node11[label="StatementsNode "];
node12[label="VariableDefinitionNode (int)y@0"];
node13[label="OperationNode operation: Addition"];
node14[label="LiteralNode literal: 1"];
node13 -> node14;
node15[label="OperationNode operation: Multiplication"];
node16[label="LiteralNode literal: 4"];
node15 -> node16;
node17[label="LiteralNode literal: 2"];
node15 -> node17;
node13 -> node15;
node12 -> node13;
node11 -> node12;
node2 -> node11;
node1 -> node2;
node0 -> node1;
}
