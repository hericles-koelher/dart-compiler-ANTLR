digraph {
graph [ordering="out"];
node0[label="ProgramNode "];
node1[label="FunctionDefinitionNode (dynamic) main "];
node2[label="VariableDefinitionNode (int)i@0"];
node1 -> node2;
node3[label="VariableDefinitionNode (int)b@0"];
node4[label="OperationNode operation: Addition"];
node5[label="LiteralNode literal: 4"];
node4 -> node5;
node6[label="LiteralNode literal: 3"];
node4 -> node6;
node3 -> node4;
node1 -> node3;
node7[label="VariableDefinitionNode (double)dd@0"];
node8[label="LiteralNode literal: 2.3"];
node7 -> node8;
node1 -> node7;
node9[label="VariableDefinitionNode (bool)d@0"];
node1 -> node9;
node10[label="VariableDefinitionNode (bool)z@0"];
node11[label="LiteralNode literal: true"];
node10 -> node11;
node1 -> node10;
node12[label="VariableDefinitionNode (String)xixi@0"];
node1 -> node12;
node13[label="VariableDefinitionNode (String)s@0"];
node14[label="LiteralNode literal: Hello World"];
node13 -> node14;
node1 -> node13;
node15[label="FunctionCallNode print"];
node16[label="VariableNode s@0"];
node15 -> node16;
node1 -> node15;
node17[label="FunctionCallNode print"];
node18[label="VariableNode b@0"];
node17 -> node18;
node1 -> node17;
node19[label="FunctionCallNode print"];
node20[label="VariableNode z@0"];
node19 -> node20;
node1 -> node19;
node21[label="FunctionCallNode print"];
node22[label="OperationNode operation: Multiplication"];
node23[label="LiteralNode literal: 4"];
node22 -> node23;
node24[label="VariableNode b@0"];
node22 -> node24;
node21 -> node22;
node1 -> node21;
node25[label="FunctionCallNode print"];
node26[label="LiteralNode literal: Teste1 if-else"];
node25 -> node26;
node1 -> node25;
node27[label="IfNode "];
node28[label="LiteralNode literal: true"];
node27 -> node28;
node29[label="StatementsNode "];
node30[label="FunctionCallNode print"];
node31[label="LiteralNode literal: If-else funcionando"];
node30 -> node31;
node29 -> node30;
node27 -> node29;
node32[label="StatementsNode "];
node33[label="FunctionCallNode print"];
node34[label="LiteralNode literal: If-else não está funcionando"];
node33 -> node34;
node32 -> node33;
node27 -> node32;
node1 -> node27;
node35[label="FunctionCallNode print"];
node36[label="LiteralNode literal: Teste2 if-else"];
node35 -> node36;
node1 -> node35;
node37[label="IfNode "];
node38[label="LiteralNode literal: false"];
node37 -> node38;
node39[label="StatementsNode "];
node40[label="FunctionCallNode print"];
node41[label="LiteralNode literal: If-else não está funcionando"];
node40 -> node41;
node39 -> node40;
node37 -> node39;
node42[label="StatementsNode "];
node43[label="FunctionCallNode print"];
node44[label="LiteralNode literal: If-else funcionando"];
node43 -> node44;
node42 -> node43;
node37 -> node42;
node1 -> node37;
node45[label="FunctionCallNode print"];
node46[label="LiteralNode literal: Teste if"];
node45 -> node46;
node1 -> node45;
node47[label="IfNode "];
node48[label="VariableNode z@0"];
node47 -> node48;
node49[label="StatementsNode "];
node50[label="FunctionCallNode print"];
node51[label="LiteralNode literal: If está funcionando"];
node50 -> node51;
node49 -> node50;
node47 -> node49;
node1 -> node47;
node52[label="AssignNode"];
node53[label="VariableNode i@0"];
node52 -> node53;
node54[label="OperationNode operation: Subtraction"];
node55[label="OperationNode operation: Addition"];
node56[label="LiteralNode literal: 1"];
node55 -> node56;
node57[label="LiteralNode literal: 2"];
node55 -> node57;
node54 -> node55;
node58[label="OperationNode operation: Multiplication"];
node59[label="LiteralNode literal: 5"];
node58 -> node59;
node60[label="OperationNode operation: Division"];
node61[label="LiteralNode literal: 20"];
node60 -> node61;
node62[label="LiteralNode literal: 4"];
node60 -> node62;
node58 -> node60;
node54 -> node58;
node52 -> node54;
node1 -> node52;
node63[label="FunctionCallNode print"];
node64[label="VariableNode i@0"];
node63 -> node64;
node1 -> node63;
node65[label="VariableDefinitionNode (bool)j@0"];
node66[label="LiteralNode literal: true"];
node65 -> node66;
node1 -> node65;
node67[label="AssignNode"];
node68[label="VariableNode i@0"];
node67 -> node68;
node69[label="LiteralNode literal: 10"];
node67 -> node69;
node1 -> node67;
node70[label="IfNode "];
node71[label="OperationNode operation: Less"];
node72[label="VariableNode i@0"];
node71 -> node72;
node73[label="LiteralNode literal: 5"];
node71 -> node73;
node70 -> node71;
node74[label="StatementsNode "];
node75[label="FunctionCallNode print"];
node76[label="LiteralNode literal: If i > 5 funcionando também!"];
node75 -> node76;
node74 -> node75;
node70 -> node74;
node1 -> node70;
node77[label="FunctionCallNode print"];
node78[label="LiteralNode literal: Teste While"];
node77 -> node78;
node1 -> node77;
node79[label="WhileNode "];
node80[label="OperationNode operation: Greater"];
node81[label="VariableNode i@0"];
node80 -> node81;
node82[label="LiteralNode literal: 5"];
node80 -> node82;
node79 -> node80;
node83[label="StatementsNode "];
node84[label="AssignNode"];
node85[label="VariableNode i@0"];
node84 -> node85;
node86[label="OperationNode operation: Subtraction"];
node87[label="VariableNode i@0"];
node86 -> node87;
node88[label="LiteralNode literal: 1"];
node86 -> node88;
node84 -> node86;
node83 -> node84;
node89[label="IfNode "];
node90[label="OperationNode operation: Equals"];
node91[label="VariableNode i@0"];
node90 -> node91;
node92[label="LiteralNode literal: 5"];
node90 -> node92;
node89 -> node90;
node93[label="StatementsNode "];
node94[label="AssignNode"];
node95[label="VariableNode j@0"];
node94 -> node95;
node96[label="LiteralNode literal: false"];
node94 -> node96;
node93 -> node94;
node97[label="FunctionCallNode print"];
node98[label="VariableNode j@0"];
node97 -> node98;
node93 -> node97;
node89 -> node93;
node83 -> node89;
node99[label="FunctionCallNode print"];
node100[label="VariableNode i@0"];
node99 -> node100;
node83 -> node99;
node79 -> node83;
node1 -> node79;
node0 -> node1;
}
