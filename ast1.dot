digraph {
graph [ordering="out"];
node0[label="ProgramNode "];
node1[label="FunctionDefinitionNode (dynamic) main "];
node2[label="VariableDeclarationNode (int)i@0"];
node1 -> node2;
node3[label="VariableDefinitionNode (String)s@0"];
node4[label="StringLiteralNode literal: \"Ola\""];
node3 -> node4;
node1 -> node3;
node5[label="FunctionCallNode print([AST.VariableNode@302a07d])"];
node1 -> node5;
node6[label="AssignNode"];
node7[label="VariableNode i@0"];
node6 -> node7;
node8[label="OperationNode operation: Addition"];
node9[label="NumericLiteralNode literal: 2"];
node8 -> node9;
node10[label="OperationNode operation: Multiplication"];
node11[label="NumericLiteralNode literal: 5"];
node10 -> node11;
node12[label="OperationNode operation: Multiplication"];
node13[label="NumericLiteralNode literal: 3"];
node12 -> node13;
node14[label="NumericLiteralNode literal: 4"];
node12 -> node14;
node10 -> node12;
node8 -> node10;
node6 -> node8;
node1 -> node6;
node0 -> node1;
}
